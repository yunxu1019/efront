<style>
    h4 {
        text-align: center;
        font-size: 16px;
        color: #822;
        /* background: #fc2; */
        margin: 0;
        padding: 20px 0;
        font-family: 'Times New Roman', Times, serif;
    }
</style>
<div>
    <h4>${i18n`数值过大易造成页面卡死！`}</h4>
    <field -repeat="f in formats" -src="[f,value]"></field>
</div>
<script>
    var _value = null;
    BigNumber.DECIMAL_DIGIT = 500;
    var parseFloat = (a, b) => new BigNumber(a, b);
    var value0 = Object.create(null);

    var value1 = {
        get [i18n`十进制`]() {
            return _value;
        },
        set [i18n`十进制`](v) {
            _value = parseFloat(v)
        },
        get [i18n`十六进制`]() {
            return _value.toString(16, -73);
        },
        set [i18n`十六进制`](v) {
            _value = parseFloat(v, 16);
        },
        get [i18n`二进制`]() {
            return _value.toString(2, -73);
        },
        set [i18n`二进制`](v) {
            _value = parseFloat(v, 2);
        },
        get [i18n`八进制`]() {
            return _value.toString(8, -53)
        },
        set [i18n`八进制`](v) {
            _value = parseFloat(v, 8)
        },
        get [i18n`三十六进制`]() {
            return _value.toString(36, -73);
        },
        set [i18n`三十六进制`](v) {
            _value = parseFloat(v, 36);
        },
        get [i18n`六十进制`]() {
            return _value.toString(60, -73);
        },
        set [i18n`六十进制`](v) {
            _value = parseFloat(v, 60);
        },
        get [i18n`浮点数机器码`]() {
            var v = +_value;
            var s = /^-/.test(v);
            if (s) v = -v;
            var i = Math.log2(v) | 0;
            if (!v) i = 0;
            else v = v * Math.pow(2, 23 - i) - (1 << 23), i = i + 127;
            v = s << 31 | i << 23 | v & 0x7fffff;
            return [v >> 24 & 0xff, v >> 16 & 0xff, v >> 8 & 0xff, v & 0xff].map(hex).join('');
        },
        set [i18n`浮点数机器码`](v) {
            v = parseInt(v, 16);
            var s = v >> 31;
            var i = v >> 23 & 0xff;
            v = 0x7fffff & v | 0x800000;
            if (i === 0 && v === 0) v = 0;
            else v = v * Math.pow(2, i - 126 - 24);
            if (s) v = -v;
            _value = v;
        },
        get [i18n`双精度机器码`]() {
            var s = /^-/.test(_value);
            var v = window.parseFloat(_value);
            if (s) v = -v;
            var i = Math.floor(Math.log2(v));
            if (!v) i = 0;
            else v = (v * Math.pow(2, -i) - 1) * Math.pow(2, 52), i += 1023;
            return [
                s << 7 | (i >> 4 & 0x7f),
                (i & 0xf) << 4 | v / Math.pow(2, 48) & 0xff,
                v / Math.pow(2, 40) & 0xff,
                v / Math.pow(2, 32) & 0xff,
                v >> 24 & 0xff, v >> 16 & 0xff,
                v >> 8 & 0xff, v & 0xff
            ].map(hex).join('');
        },
        set [i18n`双精度机器码`](v) {
            var s = parseInt(v[0], 16) >> 3;
            var i = parseInt(v.slice(0, 3), 16) & 0x7ff;
            v = parseInt(v.slice(3), 16);
            if (i === 0 && v === 0) v = 0;
            else if (i < 1023) v = (v + Math.pow(2, 52)) * Math.pow(2, i - 1023 - 52);
            else v = (v + Math.pow(2, 53)) * Math.pow(2, i - 1023 - 53);
            if (s) v = -v;
            _value = v;
        },
        get [i18n`双精度机器码`]() {
            var v = _value.toString(2, 53);
            var s = /^-/.test(v) ? "1" : '0';
            if (+s) v = v.slice(1);
            var i = v.indexOf('.');
            if (i < 0) i = v.length;
            else v = v.slice(0, i) + v.slice(i + 1);
            if (/^0/.test(v)) {
                var e = v.indexOf("1");
                v = v.slice(e);
                i -= e;
            }
            i--;
            if (v === '0' || i < -1078) {
                i = Array(12).join("0");
                v = Array(53).join('0');
            }
            else if (i > 1023) {
                v = "0";
                i = Array(12).join('1');
            }
            else {
                i += 1023;
                if (i < 0) v = Array(2 - i).join('0') + v, i = 0;
                v = v.slice(1, 53);
                i = i.toString(2);
            }
            if (i.length < 11) i = Array(12 - i.length).join('0') + i;
            if (v.length < 52) v += Array(53 - v.length).join("0");
            v = (s + i + v).replace(/[01]{4}/g, a => parseInt(a, 2).toString(16));
            return v;
        },

    };
    var hex = a => a < 0x10 ? "0" + a.toString(16) : a.toString(16);
    var value = Object.create(null);
    var 进制 = Object.getOwnPropertyNames(value1);
    var formats = 进制.map(k => {
        Object.defineProperty(value, k, {
            get() {
                return value0[k];
            },
            set(v) {
                if (v === value0[k]) return;
                value1[k] = v;
                进制.forEach(k => value0[k] = value1[k]);
            },
        })
        return { name: k, key: k };
    });

</script>