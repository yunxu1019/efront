<style>
    :scope {
        line-height: 1.2;
        display: block;
        height: 100%;
        width: 100%;
    }

    xmenu {
        z-index: 2;
    }

    [body] {
        border-top: 42px solid transparent;
        padding-top: 40px;
        padding-bottom: 0 !important;
        border-bottom: 46px solid transparent;
    }


    p4 {
        line-height: 1.8;
        display: block;
        margin: 20px 0;
    }

    p4 m {
        line-height: 1.2;
        display: inline-block;
        margin-right: 6px;
        background: #222;
        padding: 2px 6px;
        border-radius: 3px;
    }

    [envs] m {
        color: #4ec9b0;
    }

    [imported] m {
        color: #c586c0;
    }

    b[t] {
        color: #c40;
    }

    b[w] {
        color: #29f;
    }

    b[l] {
        color: #29c;
    }

    h2 b {
        font-size: 14px;
        display: inline-block;
        border: 1.2px solid;
        margin-left: 6px;
        padding: 2px 4px;
    }

    [codearea] {
        width: 100%;
        height: 100%;
    }

    [codearea]>code {
        overflow: auto;
        width: 100%;
        height: 100%;
        padding: 10px 20px 60px 20px;
        white-space: nowrap;
        outline: none;
    }

    markdown {
        margin: -6px -20px 0 -10px;
    }

    [foot]>button {
        padding: 0 20px;
    }

    .result {
        position: absolute;
        bottom: 0;
        right: 0;
        left: 0;
        padding: 10px 20px;
        border-top: 1px solid #333;
        background: #fff;
        display: block;
        z-index: 1;
    }
</style>
<xmenu -src="(t,i) in tags" @active="saveTagIndex(i)"></xmenu>
<h2 head>
    <span -bind="name"></span>
    <b -if="doc?.less" l>${i18n`有样式表`}</b>
    <b -if="doc?.mark" w>${i18n`有文档`}</b>
    <b -if="doc?.test" t>${i18n`有测试代码`}</b>
</h2>
<div body -if="tags[0].actived">
    <container -if="doc?.url" .src="doc.url">
    </container>
    <p4 envs>
        <span -if="envs?.length">
            ${i18n`环境依赖项:`}&nbsp; <m -repeat="c in envs" -bind="c"> </m>
        </span>
        <span -else> ${i18n`无环境依赖项`} </span>
    </p4>
    <p4 imported>
        <span -if="required?.length">
            ${i18n`导入项:`}&nbsp;<m -repeat="c in required" -bind="c"></m>
        </span>
        <span -else>
            ${i18n`无导入项`}
        </span>
    </p4>
</div>
<div body -elseif="tags[1].actived">
    <div codearea #coder onkeyup="!event.isComposing&&updatecode()" onkeydown.tab="keytab(event)"></div>
    <resultpad .result #coderesult></resultpad>
</div>
<div foot -if="tags[1].actived">
    <a -if="doc?.test" @click="clearpad()">${i18n`清理`}</a>
    <a -if="doc?.test" @click="loadcode()">${i18n`载入测试代码`}</a>
    <btn @click="execute()">${i18n`运行`}</btn>
</div>
<script>
    var commaps = Object.create(null);
    var initCommap = function (live) {
        var commap = commaps[live];
        if (!commap) {
            commap = commaps[live] = Object.create(null);
            var lives = data.getInstance("components");
            if (live) {
                lives = lives.slice().sort((a, b) => {
                    if (a.name === live) return -1;
                    return 0;
                });
                lives.forEach(a => {
                    for (var c of a.children) {
                        var name = c.name.replace(/\.[^\.]+$/, '');
                        var real = `${a.name}$${name}`;
                        if (!commap[name]) commap[name] = real;
                        commap[real] = real;
                    }
                })
            }
        }
        return commap;
    };
    var request = modules["get request"]();
    modules["set request"](function (url, onload, onerror, version) {
        if (!/[\*~]/.test(url)) return request(url, onload, onerror, version);
        var name = url.replace(/[\*~][\s\S]*$/, '');
        var live = url.slice(name.length + 1);
        var commap = initCommap(live);
        name = name.replace(/[^\/]+$/g, a => commap[a] || a);
        return request(name, onload, onerror, version)
    });
    var 分析 = lazy(async function (com, props) {
        if (props.mark) props.url = '/mark/coms/' + com.replace(/\.js$/i, '.md');
        scope.doc = props;
        scope.name = com;
        var xhr = await cross("get", "./components:" + com);
        var code = compile$scanner2(xhr.response);
        code.fix();
        var envs = code.envs;
        if (props.less) envs.cless = true;
        var required = [];
        if (envs.require) code.used.require.forEach(r => {
            var next = r.next;
            if (!next) return;
            if (next.type !== code.SCOPED || next.entry !== '(') return;
            var first = next.first;
            if (!first || first.type !== code.QUOTED) return;
            var req = code.program.createString([first]);
            required.push(req);
        });
        scope.required = required;
        scope.envs = Object.keys(envs);
        render.refresh();
        if (tags[1].actived) loadcode();
    });
    var loadcode = async function () {
        var modName = scope.name.replace(/\.js$/, '_test');
        if (scope.doc.test) {
            var xhr = await cross('get', "./components:" + modName + '.js');
            var codetext = xhr.responseText;
            var code = compile$scanner2(codetext);
            var envs = code.envs;
            var vars = code.vars;
            var commName = modName.replace(/^[\s\S]*\//, '');
            var lessName = commName + ".less", lessData;
            var cssWrap = `css-` + +new Date;
            if (scope.doc.test.indexOf(lessName) >= 0) {
                lessData = await cross("get", "./components:" + modName + ".less");
                lessData = compile$素馨(lessData.responseText, "." + cssWrap);
                if (code.isExpressQueue()) {
                    codetext = `return cless(${codetext},\`${lessData}\`,"${cssWrap}")`;
                }
                else {
                    var entryName;
                    if (vars.main) entryName = "main";
                    else if (vars.Main) entryName = 'Main';
                    else if (vars.MAIN) entryName = "MAIN";
                    else if (vars[commName]) entryName = commName;
                    if (entryName) codetext += `\r\nreturn cless(${entryName},\`${lessData}\`,"${cssWrap}")`;
                }
            }
            else {
                if (code.isExpressQueue()) codetext = "return " + codetext.trim();
                else if (vars.main) codetext += '\r\nreturn main';
                else if (vars.Main) codetext += '\r\nreturn Main';
                else if (vars.MAIN) codetext += "\r\nreturn MAIN";
                else if (vars[modName]) codetext += "\r\nreturn " + modName;
            }
            var templateName = commName;
            if (envs.template) templateName = 'template';
            if (envs[templateName]) {
                delete envs[templateName];
                var template = await cross("get", './components:' + modName + ".html");
                codetext = `var ${templateName}={toString(){return \`${template.responseText.replace(/>\s+</g, '><')}\`}};\r\n` + codetext;
            }
            initcode(codetext);
        }
        else {
            initcode('');
        }
        scope.codetext = scope.coder.innerText;
        execute();
    };
    var blink = "\u0080";
    var markAnchorOffset = function () {
        var { anchorNode, anchorOffset } = document.getSelection();
        if (!anchorNode || !scope.coder) return;
        var [c] = scope.coder.children;
        if (anchorNode.nodeType === 1) {
            var node = document.createTextNode(blink);
            anchorNode.insertBefore(node, anchorNode.childNodes[anchorOffset])
        }
        else if (anchorNode.nodeType === 3) {
            anchorNode.nodeValue = anchorNode.nodeValue.slice(0, anchorOffset) + blink + anchorNode.nodeValue.slice(anchorOffset);
        }
    };
    var unmarkAnchorOffset = function () {
        var [c] = scope.coder.children;
        var node = c.firstChild;
        while (node) {
            if (node.nodeType === 1) {
                if (node.innerText.indexOf(blink) >= 0) {
                    node = node.firstChild;
                    continue;
                }
            }
            else if (node.nodeType === 3) {
                if (node.nodeValue.indexOf(blink) >= 0) break;
            }
            node = node.nextSibling;
        }
        if (node) {
            var offset = node.nodeValue.indexOf(blink);
            node.nodeValue = node.nodeValue.slice(0, offset) + node.nodeValue.slice(offset + 1);
            document.getSelection().setBaseAndExtent(node, offset, node, offset);
            if (!node.nodeValue) {
                remove(node);
            }
        }
    }
    var getAnchorOffset = function () {
        var { anchorNode, anchorOffset } = document.getSelection();
        var [c] = scope.coder.children;
        if (anchorNode === c || !anchorNode) return -anchorOffset;
        var sibling = anchorNode.previousSibling ? anchorNode.previousSibling : anchorNode.parentNode.previousSibling;
        while (sibling && sibling !== c) {
            switch (sibling.nodeType) {
                case 1:
                    anchorOffset += sibling.innerText.length || 1;
                    break;
                case 3:
                    anchorOffset += sibling.nodeValue.length;
                    break;
            }
            sibling = sibling.previousSibling ? sibling.previousSibling : sibling.parentNode.previousSibling;
        }
        return anchorOffset;
    };
    var setAnchorOffset = function (anchorOffset) {
        var [c] = scope.coder.children;
        if (anchorOffset < 0) {
            anchorOffset = -anchorOffset;
            if (anchorOffset > c.childNodes.length) anchorOffset = c.childNodes.length;
            return document.getSelection().setBaseAndExtent(c, anchorOffset, c, anchorOffset);
        }
        var offset = anchorOffset;
        var child = c.firstChild;
        while (child) {
            var delta = 0;
            switch (child.nodeType) {
                case 1:
                    delta = child.innerText.length || 1;
                    break;
                case 3:
                    delta = child.nodeValue.length;
                    break;
            }
            if (delta >= offset) {
                if (child.nodeType === 1) {
                    if (child.firstChild) {
                        child = child.firstChild;
                        continue;
                    }
                    offset -= 1;
                    break;
                }
                break;
            }
            offset -= delta;
            if (offset <= 0) break;
            child = child.nextSibling;
        }
        if (!child) child = c, offset = c.childNodes.length;
        return document.getSelection().setBaseAndExtent(child, offset, child, offset);
    }
    var initcode = function (innerText) {
        try {
            var colored = codetext("js", innerText, blink);
        } catch { return; }
        var innerHTML = scope.coder.innerHTML.replace(/\s*contenteditable\=[^\s\>]+/i, '');
        if (innerHTML === colored) return;
        var [c0] = scope.coder.children;
        var contentLength = c0 ? innerText.length : 0;
        var scrollTop = c0 ? c0.scrollTop : 0;
        var scrollLeft = c0 ? c0.scrollLeft : 0;
        scope.coder.innerHTML = colored;
        var [c] = scope.coder.children;
        c.scrollTop = scrollTop;
        c.scrollLeft = scrollLeft;
        c.contentEditable = true;
    };
    var updatecode = lazy(function () {
        markAnchorOffset();
        var innerText = scope.coder.innerText;
        var trimspace = (_, a) => a ? "" : " ";
        var trimreg = /[\s\u00a0\u2002\u0080]+([\}\{\;\[\]\(\)\,\>\<\+\-\*\&\^\/%!~:?])*/g;
        unmarkAnchorOffset();
        if (scope.codetext.replace(trimreg, trimspace).trim() === innerText.replace(trimreg, trimspace).trim()) return;
        initcode(innerText);
        unmarkAnchorOffset();
        scope.codetext = scope.coder.innerText;
    });
    var execute = async function () {
        try {
            var live = /^([\s\S]+)\//.exec(scope.name);
            if (live) live = live[1];
            var commap = initCommap(live);
            remove(scope.coderesult.childNodes);
            var codetext = scope.codetext.replace(/[\u2002\u00a0]/g, ' ');
            data.patchInstance("docscode", { codetext: codetext })
            var code = compile$scanner2(codetext);
            var envs = code.envs;
            var argNames = Object.keys(envs);
            var args = await Promise.all(argNames.map(a => init(a + "*" + live, null, { ["init*" + live]: init, ["put*" + live]: put, ["zimoli*" + live]: zimoli, ["appendChild*" + live]: appendChild, ["remove*" + live]: remove, ["render*" + live]: render })));
            var func = createFunction("", codetext, argNames, code.async, code.yield);
            var res = func.apply(window, args);
            if (isFunction(res)) {
                res = res.call(res);
            }
            if (isElement(res) || isArray(res)) {
                appendChild(scope.coderesult, res);
            }
        } catch (e) {
            alert(String(e), 'error');
            throw e;
        }
    };
    var tags = [
        { name: i18n`简介` },
        { name: i18n`试试` }
    ];
    tags[data.getInstance("docscode").tagIndex | 0].actived = true;
    var actived = tags.map(t => t.actived);
    var xmenu = menu;
    var page = view();
    on("submit")(page, e => e.preventDefault());
    page.innerHTML = template;
    var scope = {
        btn: button,
        container,
        view,
        tags,
        a: button,
        codetext: "",
        xmenu: menu,
        loadcode,
        clearpad() {
            remove(this.coderesult.childNodes);
        },
        execute,
        updatecode,
        saveTagIndex(i) {
            data.setInstance("docscode", { tagIndex: i });
            if (i === 1 && !scope.codetext) requestAnimationFrame(loadcode);
        },
        keytab(event) {
            event.preventDefault();
        }
    };
    render(page, scope);
    function main(name) {
        分析(name, this.data);
        return page;
    }
</script>