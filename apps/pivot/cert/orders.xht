<style>
    &>list,
    &>div {
        display: inline-block;
    }

    & {
        --border: 1px solid #0006;
    }

    &>xmenu[horizonal] {
        width: 100%;
        margin-bottom: -1px;
        z-index: 1;
        border-bottom: none;
        box-shadow: none;
        background: none;

        .actived {
            background: #fff;
            color: #333;
            border: --border;
            border-bottom: none;
        }

        +form {
            border: --border;
            background: #fff;
        }
    }

    [actived] {
        background: #fff;
        /* border-bottom: 2px solid; */
    }

    [status]>s {
        width: 0;
        height: 0;
        border-radius: 50%;
        display: inline-block;
        border: .3em solid;
        margin-right: 6px;
    }

    @status(@s, @c) {
        [status=@s] {
            color: @c;
        }
    }

    @status(pending, #777);
    @status(processing, #f82);
    @status(ready, #284);
    @status(valid, #26c);
    @status(invalid, #c24);
</style>
<xmenu -src="o of orders" @active="openOrder(o)"></xmenu>
<div -if="!order">
    暂无订单
</div>
<form -elseif="order.oid" onsubmit="event.preventDefault()">
    <div body>
        <field -repeat="f in fields" _src="[f,order]"></field>
    </div>
    <div foot>
        <button -if="order?.removable" class="danger" confirm @click="dropOrder(order)">删除订单</button>
        <button -if="order.status==='processing'" @click="openOrder(order)">刷新</button>
        <button -if="order.status==='pending'" @click="auditOrder(order)">提交审核</button>
        <button -if="order.status==='ready'" @click="finalize(order)">请求证书</button>
        <button -if="order.status==='valid'" @click="see(order)">查看证书</button>
        <button -if="order.shouldupload" @click="upload(order)">上传到服务器</button>
    </div>
</form>
<div -else>
    订单异常
</div>
<script>
    var fields = refilm`
    $状态/status radio [未审核/pending,审核通过/ready,生成中/processing,生效/valid,无效/invalid]
    $证书/certificate/下载 anchor
    $域名/identifiers ${function (elem) {
            var { field, data } = elem;
            var value = data[field.key];
            if (value instanceof Array) elem.innerHTML = value.map(v => `${v.value} (${v.type})`).join("<br/>")
            else elem.innerHTML = '';
        }}
    $订单失效时间/expires ${function (elem) {
            var { field, data } = elem;
            elem.innerHTML = filterTime(data[field.key]);
        }}
    `;
    var order = {
        authorizations: [],
        expires: NaN,
        finalize: '',
        identifiers: [],
        status: ''
    };

    function main(params) {
        var { orders = [], saveUnique, setauth, uploadOnly } = params;
        orders = orders.map(acme2.parseOrder);
        if (orders.length) orders[0].actived = true;
        var page = document.createElement('orders');
        page.innerHTML = template;
        var scope = {
            fields,
            form: view,
            xmenu: menu,
            orders,
            order: null,
            async openOrder(o) {
                o = this.order = shallowClone(o);
                if (!o || !o.oid) return;
                try {
                    var order = await acme2.getOrder(o);
                    extend(o, order);
                } catch (e) {
                    if (e.status === 404) {
                        o.removable = true;
                    }
                    return;
                }
                if (o !== this.order) return;
                if (o.certificate && !o.shouldupload) {
                    var identifiers = o.identifiers;
                    var d = await pedit.query("cert", identifiers[identifiers.length - 1].value);
                    if (d && d.oid === o.oid && !d.cert) {
                        o.shouldupload = true;
                    }
                    else {
                        o.removable = true;
                    }
                }
                if (o.status === 'invalid') {
                    o.removable = true;
                }
                else {
                    if (o.certificate && +o.expires < +new Date) {
                        o.removable = true;
                    }
                }
                this.order = shallowClone(o);
            },
            async auditOrder(o) {
                await acme2.auditOrder(o, setauth);
                if (this.order === o) await this.openOrder(this.order);
                if (this.order.status !== 'pendding') {
                    alert(i18n`订单状态已更新`);
                }
                else {
                    alert(i18n`无法通过http服务完成审核`, "warn");
                }
            },

            async finalize(o) {
                await acme2.finalizeOrder(o, uploadOnly);
                order = extend({}, o, order);
                if (o === this.order) o = this.order = order;
                render.digest();
                await wait(600);
                var order = await acme2.getOrder(o);
                var cert = order.certificate;
                if (!cert) {
                    order.shouldupload = true;
                }
                else {
                    cert = await data.fromURL(cert);
                    await uploadOnly(o, { cert });
                }
                if (this.order === o) this.order = extend({}, o, order);
            },
            async dropOrder(o) {
                for (var cx = 0, dx = orders.length; cx < dx; cx++) {
                    if (orders[cx].oid === o.oid) break;
                };
                if (cx < 0) return;
                orders.splice(cx, 1);
                acme2.orders.splice(cx, 1);
                if (cx >= orders.length) cx = orders.length - 1;
                await saveUnique();
                this.openOrder(orders[cx]);
            },
            async see(o) {
                var content = `<div head>${o.identifiers.map(d => d.value).join(', ')}<close @click=remove()></close></div><loading -if='cert.loading'></loading><div body style='font-size:10px;font-family:Consolas, "Courier New", monospace;white-space:pre;' -bind='cert.data'></div><scrollbar y></scrollbar>`;
                var e = view();
                css(e, 'position:absolute;width:366px;');
                e.innerHTML = content;
                drag.on(e.firstElementChild, e);
                resize.on(e);
                renderWithDefaults(e, {
                    cert: data.fromURL(o.certificate),
                    scrollbar,
                    remove() {
                        remove(e);
                    }
                })
                popup(e);
                move.setPosition(e, [.5, .5]);
            },
            async upload(o) {
                var cert = await data.fromURL(o.certificate);
                await uploadOnly(o, { cert });
                o.shouldupload = false;
                o.removable = true;
            }
        }
        renderWithDefaults(page, scope);
        if (orders.length) scope.openOrder(orders[0]).then(render.digest);

        return page;
    }
</script>