var testAdd = function (a, b, s) {
    assert(BigNumber.add(a, b), s, `${a} + ${b}`);
};
var testPrd = function (a, b, s) {
    assert(BigNumber.prd(a, b), s, `${a} * ${b}`);
};
testAdd(0x1fffffffffffff, 1, '9007199254740992');
testAdd(0x1fffffffffffff, 2, '9007199254740993');
testAdd(0x1fffffffffffff, 3, '9007199254740994');
testAdd(0x1fffffffffffff, 3, '9007199254740994');
testAdd("562949953421296", 15, '562949953421311');
testAdd("900719925474099.2", 0.1, '900719925474099.3');
testAdd("900719925474099.2", 0.1, '900719925474099.3');
testAdd("900719925474099.3", -0.2, '900719925474099.1');
testAdd("900719925474099.39007199254740992", "-900719925474099.39007199254740992", '0');
testAdd("900719925474099.39007199254740992", 0.2, '900719925474099.59007199254740992');
testAdd("900719925474099.39007199254740992", "-900719925474099.39007", '0.00000199254740992');
testAdd("90071992547409939007.199254740992", 0.2, '90071992547409939007.399254740992');
testAdd("-90071992547409939007.199254740992", 0.2, '-90071992547409939006.999254740992');
var getrandomint = function () {
    var n = BigInt(Math.random() * new Date | 0) * BigInt(Math.random() * new Date | 0) * BigInt(Math.random() * new Date | 0);
    return n;
}
testPrd(1, 2, '2');
testPrd(1, 0.2, '0.2');
testPrd("9007199254740992.1", 0.1, '900719925474099.21');
testPrd("9007199254740992.1", 0.01, '90071992547409.921');
for (var cx = 0, dx = 1000; cx < dx; cx++) {
    var n1 = getrandomint();
    var n2 = getrandomint();
    var s = String(n1 + n2);
    testAdd(n1, n2, s);
    testPrd(n1, n2, String(n1 * n2));
}
assert(BigNumber.fix(2, 2), '2.00');
assert(BigNumber.fix(2.234, 6), '2.234000');
assert(BigNumber.fix(2.235, 6), '2.235000');
assert(BigNumber.fix(2.235, 2), '2.24');
assert(BigNumber.fix(2.234, 2), '2.23');
assert(BigNumber.fix(2.2351, 2), '2.24');
assert(BigNumber.fix(2.2349, 2), '2.23');
assert(BigNumber.fix(0.00807703432, 2), '0.01');
assert(BigNumber.round(2.2349), '2');
assert(BigNumber.round(2.4999), '2');
assert(BigNumber.round(2.5000), '3');
assert(BigNumber.round(-2.5000), '-3');
assert(BigNumber.round(2.5100), '3');
assert(BigNumber.ceil(2.5100), '3');
assert(BigNumber.ceil(-2.5100), '-2');
assert(BigNumber.ceil(2.000), '2');
assert(BigNumber.ceil(-2.000), '-2');
assert(BigNumber.floor(2.000), '2');
assert(BigNumber.floor(-2.000), '-2');
assert(BigNumber.floor(2.999), '2');
assert(BigNumber.floor(-2.999), '-3');
assert(BigNumber.ceil(2.001), '3');
assert(BigNumber.ceil(2.999), '3');
assert(BigNumber.fix("9007199254740992.234", 6), '9007199254740992.234000');
assert(BigNumber.div("9", 6, 1), "1.5");
assert(BigNumber.div("9", 6, 2), "1.50");
assert(BigNumber.div("9", 66, 2), "0.13");
assert(BigNumber.div("9007199254740992.234", 10, 4), "900719925474099.2234");
assert(BigNumber.div("9007199254740992.234", 100, 5), "90071992547409.92234");
assert(BigNumber.div("9007199254740992.234", 1000, 6), "9007199254740.992234");
assert(BigNumber.div("9007199254740992.234", 0.1, 6), "90071992547409922.340000");
assert(BigNumber.div("9007199254740992.234", 0.001, 6), "9007199254740992234.000000");
assert(BigNumber.div("9007199254740992.2345678901", 0.001, 6), "9007199254740992234.567890");
assert(BigNumber.div("9007199254740992.2345678901", "9007199254740992.2345678901", 6), "1.000000");
assert(BigNumber.div("9007199254740992.2345678901", "90071992547409922345678.901", 6), "0.000000");
assert(BigNumber.div("9007199254740992.2345678901", "900719925474099223456.78901", 6), "0.000010");
assert(BigNumber.div("99999", "9", 6), "11111.000000");
assert(new BigNumber("1.23", 8).toString(), "1.296875");
assert(new BigNumber("1.23", 8).toString(8), "1.23");
assert(new BigNumber("17", 8).toString(), "15");
assert(new BigNumber("17", 8).toString(8), "17");
assert(new BigNumber("1fffffffffffff", 16).toString(), '9007199254740991');
assert(new BigNumber("1fffffffffffff", 16).toString(16), '1fffffffffffff');
BigNumber.DECIMAL_DIGIT = 1500;
[2, 4, 8, 16, 32].forEach(cx => {
    assert(new BigNumber(BigNumber.div(new BigNumber("5"), new BigNumber((10n ** 324n).toString()), 500)).toString(cx).slice(0, 5e-324 .toString(cx).length), 5e-324 .toString(cx));
});